// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package testtalend.extract_from_webservice_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Extract_From_WebService Purpose: Extraire les donn√©es de la data
 * provider<br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Extract_From_WebService implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Extract_From_WebService";
	private final String projectName = "TESTTALEND";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Extract_From_WebService.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Extract_From_WebService.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputJSON_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputJSON_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputXML_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tNormalize_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputJSON_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputJSON_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public Double var1;

		public Double getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.var1 = null;
					} else {
						this.var1 = dis.readDouble();
					}

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// Double

				if (this.var1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.var1);
				}

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + String.valueOf(var1));
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_2
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public Double var1;

		public Double getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.var1 = null;
					} else {
						this.var1 = dis.readDouble();
					}

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// Double

				if (this.var1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.var1);
				}

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + String.valueOf(var1));
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public Double var1;

		public Double getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.var1 = null;
					} else {
						this.var1 = dis.readDouble();
					}

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// Double

				if (this.var1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.var1);
				}

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + String.valueOf(var1));
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public Double var1;

		public Double getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.var1 = null;
					} else {
						this.var1 = dis.readDouble();
					}

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// Double

				if (this.var1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.var1);
				}

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + String.valueOf(var1));
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class CV_FinalStruct implements routines.system.IPersistableRow<CV_FinalStruct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public Double var1;

		public Double getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.var1 = null;
					} else {
						this.var1 = dis.readDouble();
					}

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// Double

				if (this.var1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.var1);
				}

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + String.valueOf(var1));
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(CV_FinalStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class PV_FinalStruct implements routines.system.IPersistableRow<PV_FinalStruct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public Double var1;

		public Double getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.var1 = null;
					} else {
						this.var1 = dis.readDouble();
					}

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// Double

				if (this.var1 == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeDouble(this.var1);
				}

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + String.valueOf(var1));
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(PV_FinalStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String var1;

		public String getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.var1 = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.var1, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + var1);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class LastStruct implements routines.system.IPersistableRow<LastStruct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String var1;

		public String getVar1() {
			return this.var1;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.var1 = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.var1, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",var1=" + var1);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(LastStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FirstStruct implements routines.system.IPersistableRow<FirstStruct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FirstStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class File_CSVStruct implements routines.system.IPersistableRow<File_CSVStruct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(File_CSVStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class File_XMLStruct implements routines.system.IPersistableRow<File_XMLStruct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(File_XMLStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class hhjStruct implements routines.system.IPersistableRow<hhjStruct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(hhjStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_TESTTALEND_Extract_From_WebService = new byte[0];
		static byte[] commonByteArray_TESTTALEND_Extract_From_WebService = new byte[0];

		public String productName;

		public String getProductName() {
			return this.productName;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public Integer price;

		public Integer getPrice() {
			return this.price;
		}

		public String category;

		public String getCategory() {
			return this.category;
		}

		public String imageUrl;

		public String getImageUrl() {
			return this.imageUrl;
		}

		public String value;

		public String getValue() {
			return this.value;
		}

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_TESTTALEND_Extract_From_WebService.length) {
					if (length < 1024 && commonByteArray_TESTTALEND_Extract_From_WebService.length == 0) {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[1024];
					} else {
						commonByteArray_TESTTALEND_Extract_From_WebService = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length);
				strReturn = new String(commonByteArray_TESTTALEND_Extract_From_WebService, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_TESTTALEND_Extract_From_WebService) {

				try {

					int length = 0;

					this.productName = readString(dis);

					this.description = readString(dis);

					this.price = readInteger(dis);

					this.category = readString(dis);

					this.imageUrl = readString(dis);

					this.value = readString(dis);

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.productName, dos);

				// String

				writeString(this.description, dos);

				// Integer

				writeInteger(this.price, dos);

				// String

				writeString(this.category, dos);

				// String

				writeString(this.imageUrl, dos);

				// String

				writeString(this.value, dos);

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("productName=" + productName);
			sb.append(",description=" + description);
			sb.append(",price=" + String.valueOf(price));
			sb.append(",category=" + category);
			sb.append(",imageUrl=" + imageUrl);
			sb.append(",value=" + value);
			sb.append(",content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputJSON_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				hhjStruct hhj = new hhjStruct();
				hhjStruct row2 = hhj;
				File_XMLStruct File_XML = new File_XMLStruct();
				File_XMLStruct row3 = File_XML;
				File_CSVStruct File_CSV = new File_CSVStruct();
				File_CSVStruct row4 = File_CSV;
				FirstStruct First = new FirstStruct();
				LastStruct Last = new LastStruct();
				row5Struct row5 = new row5Struct();
				CV_FinalStruct CV_Final = new CV_FinalStruct();
				row6Struct row6 = new row6Struct();
				PV_FinalStruct PV_Final = new PV_FinalStruct();
				row7Struct row7 = new row7Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "CV_Final");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String productName;
					BigDecimal var1_sum;
					int var1_count = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.productName == null) ? 0 : this.productName.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.productName == null) {
							if (other.productName != null)
								return false;
						} else if (!this.productName.equals(other.productName))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGOUT", false);
				start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "PV_Final");
				}

				int tos_count_tAggregateRow_2_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

				class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String category;
					BigDecimal var1_sum;
					int var1_count = 0;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.category == null) ? 0 : this.category.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;

						if (this.category == null) {
							if (other.category != null)
								return false;
						} else if (!this.category.equals(other.category))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
				AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
				java.util.Map<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2, AggOperationStruct_tAggregateRow_2>();

				/**
				 * [tAggregateRow_2_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
					Double var1;
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				CV_FinalStruct CV_Final_tmp = new CV_FinalStruct();
				PV_FinalStruct PV_Final_tmp = new PV_FinalStruct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tNormalize_1 begin ] start
				 */

				ok_Hash.put("tNormalize_1", false);
				start_Hash.put("tNormalize_1", System.currentTimeMillis());

				currentComponent = "tNormalize_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "Last");
				}

				int tos_count_tNormalize_1 = 0;

				int lastNoEmptyIndex_tNormalize_1 = 0;
				int nb_line_tNormalize_1 = 0;
				String tmp_tNormalize_1 = null;
				StringBuilder currentRecord_tNormalize_1 = null;
				String[] normalizeRecord_tNormalize_1 = null;
				java.util.Set<String> recordSet_tNormalize_1 = new java.util.HashSet<String>();

				if (((String) ",").length() == 0) {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				/**
				 * [tNormalize_1 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "First");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
					String var1;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				LastStruct Last_tmp = new LastStruct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
					String var1;
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				FirstStruct First_tmp = new FirstStruct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "File_CSV");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Users/farou/OneDrive/Bureau/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/products.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_1.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				File_CSVStruct File_CSV_tmp = new File_CSVStruct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFileOutputXML_1 begin ] start
				 */

				ok_Hash.put("tFileOutputXML_1", false);
				start_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				currentComponent = "tFileOutputXML_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "File_XML");
				}

				int tos_count_tFileOutputXML_1 = 0;

				String originalFileName_tFileOutputXML_1 = "C:/Users/farou/OneDrive/Bureau/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/products.xml";
				java.io.File originalFile_tFileOutputXML_1 = new java.io.File(originalFileName_tFileOutputXML_1);

				String fileName_tFileOutputXML_1 = originalFileName_tFileOutputXML_1;
				java.io.File file_tFileOutputXML_1 = new java.io.File(fileName_tFileOutputXML_1);
				if (!file_tFileOutputXML_1.isAbsolute()) {
					file_tFileOutputXML_1 = file_tFileOutputXML_1.getCanonicalFile();
				}

				// create directory only if not exists

				file_tFileOutputXML_1.getParentFile().mkdirs();

				String[] headers_tFileOutputXML_1 = new String[2];

				headers_tFileOutputXML_1[0] = "<?xml version=\"1.0\" encoding=\"" + "ISO-8859-15" + "\"?>";

				String[] footers_tFileOutputXML_1 = new String[1];

				headers_tFileOutputXML_1[1] = "<" + "root" + ">";

				footers_tFileOutputXML_1[0] = "</" + "root" + ">";

				int nb_line_tFileOutputXML_1 = 0;

				java.io.BufferedWriter out_tFileOutputXML_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(file_tFileOutputXML_1), "ISO-8859-15"));

				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[0]);
				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.write(headers_tFileOutputXML_1[1]);
				out_tFileOutputXML_1.newLine();

				/**
				 * [tFileOutputXML_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				File_XMLStruct File_XML_tmp = new File_XMLStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileOutputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileOutputJSON_1", false);
				start_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileOutputJSON_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "hhj");
				}

				int tos_count_tFileOutputJSON_1 = 0;

				int nb_line_tFileOutputJSON_1 = 0;
				java.io.File file_tFileOutputJSON_1 = new java.io.File(
						"C:/Users/farou/OneDrive/Bureau/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/products.json");
				java.io.File dir_tFileOutputJSON_1 = file_tFileOutputJSON_1.getParentFile();
				if (dir_tFileOutputJSON_1 != null && !dir_tFileOutputJSON_1.exists()) {
					dir_tFileOutputJSON_1.mkdirs();
				}
				java.io.PrintWriter outtFileOutputJSON_1 = new java.io.PrintWriter(
						new java.io.BufferedWriter(new java.io.FileWriter(
								"C:/Users/farou/OneDrive/Bureau/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/products.json")));
				outtFileOutputJSON_1.append("{\"" + "data" + "\":[");
				boolean isFirst_tFileOutputJSON_1 = true;

				/**
				 * [tFileOutputJSON_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				hhjStruct hhj_tmp = new hhjStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tFileInputJSON_1 begin ] start
				 */

				ok_Hash.put("tFileInputJSON_1", false);
				start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				currentComponent = "tFileInputJSON_1";

				int tos_count_tFileInputJSON_1 = 0;

				class JsonPathCache_tFileInputJSON_1 {
					final java.util.Map<String, com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String, com.jayway.jsonpath.JsonPath>();

					public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
						if (jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
							return jsonPathString2compiledJsonPath.get(jsonPath);
						} else {
							com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath
									.compile(jsonPath);
							jsonPathString2compiledJsonPath.put(jsonPath, compiledLoopPath);
							return compiledLoopPath;
						}
					}
				}

				int nb_line_tFileInputJSON_1 = 0;

				JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

				String loopPath_tFileInputJSON_1 = "$.products[*]";
				java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

				java.io.InputStream is_tFileInputJSON_1 = null;
				com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath
						.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
				Object filenameOrStream_tFileInputJSON_1 = null;
				try {
					filenameOrStream_tFileInputJSON_1 = "C:/Users/Admin/Desktop/Product.json";
				} catch (java.lang.Exception e_tFileInputJSON_1) {

					System.err.println(e_tFileInputJSON_1.getMessage());
				}

				com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
				try {
					if (filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream) {
						is_tFileInputJSON_1 = (java.io.InputStream) filenameOrStream_tFileInputJSON_1;
					} else {

						java.net.URL url_tFileInputJSON_1 = new java.net.URL(
								"https://tech.ats-digital.com/api/products?size=15");
						java.net.URLConnection urlConn_tFileInputJSON_1 = url_tFileInputJSON_1.openConnection();
						is_tFileInputJSON_1 = urlConn_tFileInputJSON_1.getInputStream();

					}

					document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1, "UTF-8");
					com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
							.getCompiledJsonPath(loopPath_tFileInputJSON_1);
					Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,
							net.minidev.json.JSONObject.class);
					if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
						resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
					} else {
						resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
					}
				} catch (java.lang.Exception e_tFileInputJSON_1) {
					System.err.println(e_tFileInputJSON_1.getMessage());
				} finally {
					if (is_tFileInputJSON_1 != null) {
						is_tFileInputJSON_1.close();
					}
				}

				String jsonPath_tFileInputJSON_1 = null;
				com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

				Object value_tFileInputJSON_1 = null;
				Object root_tFileInputJSON_1 = null;
				for (Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
					nb_line_tFileInputJSON_1++;
					row1 = null;
					boolean whetherReject_tFileInputJSON_1 = false;
					row1 = new row1Struct();

					try {
						jsonPath_tFileInputJSON_1 = "productName";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row1.productName = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.productName =

									null;
						}
						jsonPath_tFileInputJSON_1 = "description";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row1.description = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.description =

									null;
						}
						jsonPath_tFileInputJSON_1 = "price";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							if (value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
								row1.price = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
							} else {
								row1.price =

										null;
							}
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.price =

									null;
						}
						jsonPath_tFileInputJSON_1 = "category";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row1.category = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.category =

									null;
						}
						jsonPath_tFileInputJSON_1 = "imageUrl";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row1.imageUrl = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.imageUrl =

									null;
						}
						jsonPath_tFileInputJSON_1 = "reviews[*].value";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row1.value = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.value =

									null;
						}
						jsonPath_tFileInputJSON_1 = "reviews[*].content";
						compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1
								.getCompiledJsonPath(jsonPath_tFileInputJSON_1);

						try {

							if (jsonPath_tFileInputJSON_1.startsWith("$")) {
								if (root_tFileInputJSON_1 == null) {
									root_tFileInputJSON_1 = document_tFileInputJSON_1
											.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
								}
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
							} else {
								value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
							}
							row1.content = value_tFileInputJSON_1 == null ?

									null : value_tFileInputJSON_1.toString();
						} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
							row1.content =

									null;
						}
					} catch (java.lang.Exception e_tFileInputJSON_1) {
						whetherReject_tFileInputJSON_1 = true;
						System.err.println(e_tFileInputJSON_1.getMessage());
						row1 = null;
					}
//}

					/**
					 * [tFileInputJSON_1 begin ] stop
					 */

					/**
					 * [tFileInputJSON_1 main ] start
					 */

					currentComponent = "tFileInputJSON_1";

					tos_count_tFileInputJSON_1++;

					/**
					 * [tFileInputJSON_1 main ] stop
					 */

					/**
					 * [tFileInputJSON_1 process_data_begin ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_begin ] stop
					 */
// Start of branch "row1"
					if (row1 != null) {

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							hhj = null;

// # Output table : 'hhj'
							hhj_tmp.productName = row1.productName;
							hhj_tmp.description = row1.description;
							hhj_tmp.price = row1.price;
							hhj_tmp.category = row1.category;
							hhj_tmp.imageUrl = row1.imageUrl;
							hhj_tmp.value = row1.value;
							hhj_tmp.content = row1.content;
							hhj = hhj_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "hhj"
						if (hhj != null) {

							/**
							 * [tFileOutputJSON_1 main ] start
							 */

							currentComponent = "tFileOutputJSON_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "hhj");
							}

							org.json.simple.JSONObject jsonRowtFileOutputJSON_1 = new org.json.simple.JSONObject();
							if (hhj.productName != null) {

								jsonRowtFileOutputJSON_1.put("productName", hhj.productName);

							} else {
								jsonRowtFileOutputJSON_1.put("productName", null);
							}

							if (hhj.description != null) {

								jsonRowtFileOutputJSON_1.put("description", hhj.description);

							} else {
								jsonRowtFileOutputJSON_1.put("description", null);
							}

							if (hhj.price != null) {

								jsonRowtFileOutputJSON_1.put("price", hhj.price);

							} else {
								jsonRowtFileOutputJSON_1.put("price", null);
							}

							if (hhj.category != null) {

								jsonRowtFileOutputJSON_1.put("category", hhj.category);

							} else {
								jsonRowtFileOutputJSON_1.put("category", null);
							}

							if (hhj.imageUrl != null) {

								jsonRowtFileOutputJSON_1.put("imageUrl", hhj.imageUrl);

							} else {
								jsonRowtFileOutputJSON_1.put("imageUrl", null);
							}

							if (hhj.value != null) {

								jsonRowtFileOutputJSON_1.put("value", hhj.value);

							} else {
								jsonRowtFileOutputJSON_1.put("value", null);
							}

							if (hhj.content != null) {

								jsonRowtFileOutputJSON_1.put("content", hhj.content);

							} else {
								jsonRowtFileOutputJSON_1.put("content", null);
							}

							if (!isFirst_tFileOutputJSON_1) {
								outtFileOutputJSON_1.append(",");
							}
							isFirst_tFileOutputJSON_1 = false;
							outtFileOutputJSON_1.append(jsonRowtFileOutputJSON_1.toJSONString());
							nb_line_tFileOutputJSON_1++;

							row2 = hhj;

							tos_count_tFileOutputJSON_1++;

							/**
							 * [tFileOutputJSON_1 main ] stop
							 */

							/**
							 * [tFileOutputJSON_1 process_data_begin ] start
							 */

							currentComponent = "tFileOutputJSON_1";

							/**
							 * [tFileOutputJSON_1 process_data_begin ] stop
							 */

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								File_XML = null;

// # Output table : 'File_XML'
								File_XML_tmp.productName = row2.productName;
								File_XML_tmp.description = row2.description;
								File_XML_tmp.price = row2.price;
								File_XML_tmp.category = row2.category;
								File_XML_tmp.imageUrl = row2.imageUrl;
								File_XML_tmp.value = row2.value;
								File_XML_tmp.content = row2.content;
								File_XML = File_XML_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "File_XML"
							if (File_XML != null) {

								/**
								 * [tFileOutputXML_1 main ] start
								 */

								currentComponent = "tFileOutputXML_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "File_XML");
								}

								StringBuilder tempRes_tFileOutputXML_1 = new StringBuilder("<" + "row");
								tempRes_tFileOutputXML_1.append(">");
								out_tFileOutputXML_1.write(tempRes_tFileOutputXML_1.toString());

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "productName" + ">"
										+ ((File_XML.productName == null) ? ""
												: (TalendString.checkCDATAForXML(File_XML.productName)))
										+ "</" + "productName" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "description" + ">"
										+ ((File_XML.description == null) ? ""
												: (TalendString.checkCDATAForXML(File_XML.description)))
										+ "</" + "description" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "price" + ">"
										+ ((File_XML.price == null) ? "" : (File_XML.price)) + "</" + "price" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "category" + ">"
										+ ((File_XML.category == null) ? ""
												: (TalendString.checkCDATAForXML(File_XML.category)))
										+ "</" + "category" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "imageUrl" + ">"
										+ ((File_XML.imageUrl == null) ? ""
												: (TalendString.checkCDATAForXML(File_XML.imageUrl)))
										+ "</" + "imageUrl" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "value" + ">"
										+ ((File_XML.value == null) ? ""
												: (TalendString.checkCDATAForXML(File_XML.value)))
										+ "</" + "value" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("<" + "content" + ">"
										+ ((File_XML.content == null) ? ""
												: (TalendString.checkCDATAForXML(File_XML.content)))
										+ "</" + "content" + ">");

								out_tFileOutputXML_1.newLine();
								out_tFileOutputXML_1.write("</" + "row" + ">");

								out_tFileOutputXML_1.newLine();

								nb_line_tFileOutputXML_1++;

								row3 = File_XML;

								tos_count_tFileOutputXML_1++;

								/**
								 * [tFileOutputXML_1 main ] stop
								 */

								/**
								 * [tFileOutputXML_1 process_data_begin ] start
								 */

								currentComponent = "tFileOutputXML_1";

								/**
								 * [tFileOutputXML_1 process_data_begin ] stop
								 */

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									File_CSV = null;

// # Output table : 'File_CSV'
									File_CSV_tmp.productName = row3.productName;
									File_CSV_tmp.description = row3.description;
									File_CSV_tmp.price = row3.price;
									File_CSV_tmp.category = row3.category;
									File_CSV_tmp.imageUrl = row3.imageUrl;
									File_CSV_tmp.value = row3.value;
									File_CSV_tmp.content = row3.content;
									File_CSV = File_CSV_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */

								/**
								 * [tMap_3 process_data_begin ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_begin ] stop
								 */
// Start of branch "File_CSV"
								if (File_CSV != null) {

									/**
									 * [tFileOutputDelimited_1 main ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "File_CSV");
									}

									StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
									if (File_CSV.productName != null) {
										sb_tFileOutputDelimited_1.append(File_CSV.productName);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (File_CSV.description != null) {
										sb_tFileOutputDelimited_1.append(File_CSV.description);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (File_CSV.price != null) {
										sb_tFileOutputDelimited_1.append(File_CSV.price);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (File_CSV.category != null) {
										sb_tFileOutputDelimited_1.append(File_CSV.category);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (File_CSV.imageUrl != null) {
										sb_tFileOutputDelimited_1.append(File_CSV.imageUrl);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (File_CSV.value != null) {
										sb_tFileOutputDelimited_1.append(File_CSV.value);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
									if (File_CSV.content != null) {
										sb_tFileOutputDelimited_1.append(File_CSV.content);
									}
									sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

									nb_line_tFileOutputDelimited_1++;
									resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

									outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

									row4 = File_CSV;

									tos_count_tFileOutputDelimited_1++;

									/**
									 * [tFileOutputDelimited_1 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_begin ] stop
									 */

									/**
									 * [tMap_4 main ] start
									 */

									currentComponent = "tMap_4";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
									}

									boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

									// ###############################
									// # Input tables (lookups)
									boolean rejectedInnerJoin_tMap_4 = false;
									boolean mainRowRejected_tMap_4 = false;

									// ###############################
									{ // start of Var scope

										// ###############################
										// # Vars tables

										Var__tMap_4__Struct Var = Var__tMap_4;
										Var.var1 = row4.value.replace("[", "");// ###############################
										// ###############################
										// # Output tables

										First = null;

// # Output table : 'First'
										First_tmp.productName = row4.productName;
										First_tmp.description = row4.description;
										First_tmp.price = row4.price;
										First_tmp.category = row4.category;
										First_tmp.imageUrl = row4.imageUrl;
										First_tmp.value = Var.var1;
										First_tmp.content = row4.content;
										First = First_tmp;
// ###############################

									} // end of Var scope

									rejectedInnerJoin_tMap_4 = false;

									tos_count_tMap_4++;

									/**
									 * [tMap_4 main ] stop
									 */

									/**
									 * [tMap_4 process_data_begin ] start
									 */

									currentComponent = "tMap_4";

									/**
									 * [tMap_4 process_data_begin ] stop
									 */
// Start of branch "First"
									if (First != null) {

										/**
										 * [tMap_5 main ] start
										 */

										currentComponent = "tMap_5";

										if (execStat) {
											runStat.updateStatOnConnection(iterateId, 1, 1, "First");
										}

										boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

										// ###############################
										// # Input tables (lookups)
										boolean rejectedInnerJoin_tMap_5 = false;
										boolean mainRowRejected_tMap_5 = false;

										// ###############################
										{ // start of Var scope

											// ###############################
											// # Vars tables

											Var__tMap_5__Struct Var = Var__tMap_5;
											Var.var1 = First.value.replace("]", "");// ###############################
											// ###############################
											// # Output tables

											Last = null;

// # Output table : 'Last'
											Last_tmp.productName = First.productName;
											Last_tmp.description = First.description;
											Last_tmp.price = First.price;
											Last_tmp.category = First.category;
											Last_tmp.imageUrl = First.imageUrl;
											Last_tmp.var1 = Var.var1;
											Last_tmp.content = First.content;
											Last = Last_tmp;
// ###############################

										} // end of Var scope

										rejectedInnerJoin_tMap_5 = false;

										tos_count_tMap_5++;

										/**
										 * [tMap_5 main ] stop
										 */

										/**
										 * [tMap_5 process_data_begin ] start
										 */

										currentComponent = "tMap_5";

										/**
										 * [tMap_5 process_data_begin ] stop
										 */
// Start of branch "Last"
										if (Last != null) {

											/**
											 * [tNormalize_1 main ] start
											 */

											currentComponent = "tNormalize_1";

											if (execStat) {
												runStat.updateStatOnConnection(iterateId, 1, 1, "Last");
											}

											normalizeRecord_tNormalize_1 = new String[1];
											if (Last.var1 != null) {
												if ("".equals(Last.var1)) {
													normalizeRecord_tNormalize_1[0] = "";
												} else {

													normalizeRecord_tNormalize_1 = Last.var1.split(",", -1);

												}
											}
											lastNoEmptyIndex_tNormalize_1 = normalizeRecord_tNormalize_1.length;

											for (int i_tNormalize_1 = 0; i_tNormalize_1 < lastNoEmptyIndex_tNormalize_1; i_tNormalize_1++) {

												currentRecord_tNormalize_1 = new StringBuilder();
												nb_line_tNormalize_1++;

												row5.productName = Last.productName;

												row5.description = Last.description;

												row5.price = Last.price;

												row5.category = Last.category;

												row5.imageUrl = Last.imageUrl;

												row5.var1 = normalizeRecord_tNormalize_1[i_tNormalize_1];

												row5.content = Last.content;

												tos_count_tNormalize_1++;

												/**
												 * [tNormalize_1 main ] stop
												 */

												/**
												 * [tNormalize_1 process_data_begin ] start
												 */

												currentComponent = "tNormalize_1";

												/**
												 * [tNormalize_1 process_data_begin ] stop
												 */

												/**
												 * [tMap_6 main ] start
												 */

												currentComponent = "tMap_6";

												if (execStat) {
													runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
												}

												boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

												// ###############################
												// # Input tables (lookups)
												boolean rejectedInnerJoin_tMap_6 = false;
												boolean mainRowRejected_tMap_6 = false;

												// ###############################
												{ // start of Var scope

													// ###############################
													// # Vars tables

													Var__tMap_6__Struct Var = Var__tMap_6;
													Var.var1 = Double.valueOf(row5.var1);// ###############################
													// ###############################
													// # Output tables

													CV_Final = null;
													PV_Final = null;

// # Output table : 'CV_Final'
													CV_Final_tmp.productName = row5.productName;
													CV_Final_tmp.description = row5.description;
													CV_Final_tmp.price = row5.price;
													CV_Final_tmp.category = row5.category;
													CV_Final_tmp.imageUrl = row5.imageUrl;
													CV_Final_tmp.var1 = Var.var1;
													CV_Final_tmp.content = row5.content;
													CV_Final = CV_Final_tmp;

// # Output table : 'PV_Final'
													PV_Final_tmp.productName = row5.productName;
													PV_Final_tmp.description = row5.description;
													PV_Final_tmp.price = row5.price;
													PV_Final_tmp.category = row5.category;
													PV_Final_tmp.imageUrl = row5.imageUrl;
													PV_Final_tmp.var1 = Var.var1;
													PV_Final_tmp.content = row5.content;
													PV_Final = PV_Final_tmp;
// ###############################

												} // end of Var scope

												rejectedInnerJoin_tMap_6 = false;

												tos_count_tMap_6++;

												/**
												 * [tMap_6 main ] stop
												 */

												/**
												 * [tMap_6 process_data_begin ] start
												 */

												currentComponent = "tMap_6";

												/**
												 * [tMap_6 process_data_begin ] stop
												 */
// Start of branch "CV_Final"
												if (CV_Final != null) {

													/**
													 * [tAggregateRow_1_AGGOUT main ] start
													 */

													currentVirtualComponent = "tAggregateRow_1";

													currentComponent = "tAggregateRow_1_AGGOUT";

													if (execStat) {
														runStat.updateStatOnConnection(iterateId, 1, 1, "CV_Final");
													}

													operation_finder_tAggregateRow_1.productName = CV_Final.productName;

													operation_finder_tAggregateRow_1.hashCodeDirty = true;

													operation_result_tAggregateRow_1 = hash_tAggregateRow_1
															.get(operation_finder_tAggregateRow_1);

													if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

														operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

														operation_result_tAggregateRow_1.productName = operation_finder_tAggregateRow_1.productName;

														hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
																operation_result_tAggregateRow_1);

													} // G_OutMain_AggR_001

													if (CV_Final.var1 != null) { // G_OutMain_AggR_546

														operation_result_tAggregateRow_1.var1_count++;

														if (operation_result_tAggregateRow_1.var1_sum == null) {
															operation_result_tAggregateRow_1.var1_sum = new BigDecimal(
																	0);
														}
														operation_result_tAggregateRow_1.var1_sum = operation_result_tAggregateRow_1.var1_sum
																.add(new BigDecimal(String.valueOf(CV_Final.var1)));

													} // G_OutMain_AggR_546

													tos_count_tAggregateRow_1_AGGOUT++;

													/**
													 * [tAggregateRow_1_AGGOUT main ] stop
													 */

													/**
													 * [tAggregateRow_1_AGGOUT process_data_begin ] start
													 */

													currentVirtualComponent = "tAggregateRow_1";

													currentComponent = "tAggregateRow_1_AGGOUT";

													/**
													 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
													 */

													/**
													 * [tAggregateRow_1_AGGOUT process_data_end ] start
													 */

													currentVirtualComponent = "tAggregateRow_1";

													currentComponent = "tAggregateRow_1_AGGOUT";

													/**
													 * [tAggregateRow_1_AGGOUT process_data_end ] stop
													 */

												} // End of branch "CV_Final"

// Start of branch "PV_Final"
												if (PV_Final != null) {

													/**
													 * [tAggregateRow_2_AGGOUT main ] start
													 */

													currentVirtualComponent = "tAggregateRow_2";

													currentComponent = "tAggregateRow_2_AGGOUT";

													if (execStat) {
														runStat.updateStatOnConnection(iterateId, 1, 1, "PV_Final");
													}

													operation_finder_tAggregateRow_2.category = PV_Final.category;

													operation_finder_tAggregateRow_2.hashCodeDirty = true;

													operation_result_tAggregateRow_2 = hash_tAggregateRow_2
															.get(operation_finder_tAggregateRow_2);

													if (operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

														operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

														operation_result_tAggregateRow_2.category = operation_finder_tAggregateRow_2.category;

														hash_tAggregateRow_2.put(operation_result_tAggregateRow_2,
																operation_result_tAggregateRow_2);

													} // G_OutMain_AggR_001

													if (PV_Final.var1 != null) { // G_OutMain_AggR_546

														operation_result_tAggregateRow_2.var1_count++;

														if (operation_result_tAggregateRow_2.var1_sum == null) {
															operation_result_tAggregateRow_2.var1_sum = new BigDecimal(
																	0);
														}
														operation_result_tAggregateRow_2.var1_sum = operation_result_tAggregateRow_2.var1_sum
																.add(new BigDecimal(String.valueOf(PV_Final.var1)));

													} // G_OutMain_AggR_546

													tos_count_tAggregateRow_2_AGGOUT++;

													/**
													 * [tAggregateRow_2_AGGOUT main ] stop
													 */

													/**
													 * [tAggregateRow_2_AGGOUT process_data_begin ] start
													 */

													currentVirtualComponent = "tAggregateRow_2";

													currentComponent = "tAggregateRow_2_AGGOUT";

													/**
													 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
													 */

													/**
													 * [tAggregateRow_2_AGGOUT process_data_end ] start
													 */

													currentVirtualComponent = "tAggregateRow_2";

													currentComponent = "tAggregateRow_2_AGGOUT";

													/**
													 * [tAggregateRow_2_AGGOUT process_data_end ] stop
													 */

												} // End of branch "PV_Final"

												/**
												 * [tMap_6 process_data_end ] start
												 */

												currentComponent = "tMap_6";

												/**
												 * [tMap_6 process_data_end ] stop
												 */
												// end for
											}

											/**
											 * [tNormalize_1 process_data_end ] start
											 */

											currentComponent = "tNormalize_1";

											/**
											 * [tNormalize_1 process_data_end ] stop
											 */

										} // End of branch "Last"

										/**
										 * [tMap_5 process_data_end ] start
										 */

										currentComponent = "tMap_5";

										/**
										 * [tMap_5 process_data_end ] stop
										 */

									} // End of branch "First"

									/**
									 * [tMap_4 process_data_end ] start
									 */

									currentComponent = "tMap_4";

									/**
									 * [tMap_4 process_data_end ] stop
									 */

									/**
									 * [tFileOutputDelimited_1 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_1";

									/**
									 * [tFileOutputDelimited_1 process_data_end ] stop
									 */

								} // End of branch "File_CSV"

								/**
								 * [tMap_3 process_data_end ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_end ] stop
								 */

								/**
								 * [tFileOutputXML_1 process_data_end ] start
								 */

								currentComponent = "tFileOutputXML_1";

								/**
								 * [tFileOutputXML_1 process_data_end ] stop
								 */

							} // End of branch "File_XML"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

							/**
							 * [tFileOutputJSON_1 process_data_end ] start
							 */

							currentComponent = "tFileOutputJSON_1";

							/**
							 * [tFileOutputJSON_1 process_data_end ] stop
							 */

						} // End of branch "hhj"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

					} // End of branch "row1"

					/**
					 * [tFileInputJSON_1 process_data_end ] start
					 */

					currentComponent = "tFileInputJSON_1";

					/**
					 * [tFileInputJSON_1 process_data_end ] stop
					 */

					/**
					 * [tFileInputJSON_1 end ] start
					 */

					currentComponent = "tFileInputJSON_1";

				}
				globalMap.put("tFileInputJSON_1_NB_LINE", nb_line_tFileInputJSON_1);

				ok_Hash.put("tFileInputJSON_1", true);
				end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileInputJSON_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputJSON_1 end ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				outtFileOutputJSON_1.print("]}");
				outtFileOutputJSON_1.close();
				globalMap.put("tFileOutputJSON_1_NB_LINE", nb_line_tFileOutputJSON_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "hhj");
				}

				ok_Hash.put("tFileOutputJSON_1", true);
				end_Hash.put("tFileOutputJSON_1", System.currentTimeMillis());

				/**
				 * [tFileOutputJSON_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputXML_1 end ] start
				 */

				currentComponent = "tFileOutputXML_1";

				out_tFileOutputXML_1.write(footers_tFileOutputXML_1[0]);

				out_tFileOutputXML_1.newLine();
				out_tFileOutputXML_1.close();
				globalMap.put("tFileOutputXML_1_NB_LINE", nb_line_tFileOutputXML_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "File_XML");
				}

				ok_Hash.put("tFileOutputXML_1", true);
				end_Hash.put("tFileOutputXML_1", System.currentTimeMillis());

				/**
				 * [tFileOutputXML_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "File_CSV");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "First");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tNormalize_1 end ] start
				 */

				currentComponent = "tNormalize_1";

				globalMap.put("tNormalize_1_NB_LINE", nb_line_tNormalize_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "Last");
				}

				ok_Hash.put("tNormalize_1", true);
				end_Hash.put("tNormalize_1", System.currentTimeMillis());

				/**
				 * [tNormalize_1 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "CV_Final");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"C:/Users/farou/OneDrive/Bureau/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/product_rate.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				if (filetFileOutputDelimited_2.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_2.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row6.productName = aggregated_row_tAggregateRow_1.productName;

					if (aggregated_row_tAggregateRow_1.var1_count > 0) {

						row6.var1 = aggregated_row_tAggregateRow_1.var1_sum
								.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_1.var1_count)), 10,
										BigDecimal.ROUND_HALF_UP)

								.doubleValue()

						;

					} else {
						String count = "0";

						row6.var1 = ParserUtils.parseTo_Double(count);

					}

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 main ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
					}

					StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
					if (row6.productName != null) {
						sb_tFileOutputDelimited_2.append(row6.productName);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row6.description != null) {
						sb_tFileOutputDelimited_2.append(row6.description);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row6.price != null) {
						sb_tFileOutputDelimited_2.append(row6.price);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row6.category != null) {
						sb_tFileOutputDelimited_2.append(row6.category);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row6.imageUrl != null) {
						sb_tFileOutputDelimited_2.append(row6.imageUrl);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row6.var1 != null) {
						sb_tFileOutputDelimited_2.append(row6.var1);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
					if (row6.content != null) {
						sb_tFileOutputDelimited_2.append(row6.content);
					}
					sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

					nb_line_tFileOutputDelimited_2++;
					resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

					outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

					tos_count_tFileOutputDelimited_2++;

					/**
					 * [tFileOutputDelimited_2 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					/**
					 * [tFileOutputDelimited_2 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_2 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_2";

					/**
					 * [tFileOutputDelimited_2 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "PV_Final");
				}

				ok_Hash.put("tAggregateRow_2_AGGOUT", true);
				end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Users/farou/OneDrive/Bureau/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/category_rate.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				if (filetFileOutputDelimited_3.exists()) {
					throw new RuntimeException("The particular file \"" + filetFileOutputDelimited_3.getAbsoluteFile()
							+ "\" already exist. If you want to overwrite the file, please uncheck the"
							+ " \"Throw an error if the file already exist\" option in Advanced settings.");
				}
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_2_AGGIN", false);
				start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				int tos_count_tAggregateRow_2_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2
						.values();

				globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

				for (AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600

					/**
					 * [tAggregateRow_2_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					row7.category = aggregated_row_tAggregateRow_2.category;

					if (aggregated_row_tAggregateRow_2.var1_count > 0) {

						row7.var1 = aggregated_row_tAggregateRow_2.var1_sum
								.divide(new BigDecimal(String.valueOf(aggregated_row_tAggregateRow_2.var1_count)), 10,
										BigDecimal.ROUND_HALF_UP)

								.doubleValue()

						;

					} else {
						String count = "0";

						row7.var1 = ParserUtils.parseTo_Double(count);

					}

					tos_count_tAggregateRow_2_AGGIN++;

					/**
					 * [tAggregateRow_2_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 main ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
					}

					StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
					if (row7.productName != null) {
						sb_tFileOutputDelimited_3.append(row7.productName);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.description != null) {
						sb_tFileOutputDelimited_3.append(row7.description);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.price != null) {
						sb_tFileOutputDelimited_3.append(row7.price);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.category != null) {
						sb_tFileOutputDelimited_3.append(row7.category);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.imageUrl != null) {
						sb_tFileOutputDelimited_3.append(row7.imageUrl);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.var1 != null) {
						sb_tFileOutputDelimited_3.append(row7.var1);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row7.content != null) {
						sb_tFileOutputDelimited_3.append(row7.content);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

					nb_line_tFileOutputDelimited_3++;
					resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

					outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

					tos_count_tFileOutputDelimited_3++;

					/**
					 * [tFileOutputDelimited_3 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

					/**
					 * [tAggregateRow_2_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_2_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_2";

					currentComponent = "tAggregateRow_2_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_2_AGGIN", true);
				end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_2_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_2_AGGIN"
			globalMap.remove("tAggregateRow_2");

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			try {

				/**
				 * [tFileInputJSON_1 finally ] start
				 */

				currentComponent = "tFileInputJSON_1";

				/**
				 * [tFileInputJSON_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputJSON_1 finally ] start
				 */

				currentComponent = "tFileOutputJSON_1";

				/**
				 * [tFileOutputJSON_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputXML_1 finally ] start
				 */

				currentComponent = "tFileOutputXML_1";

				/**
				 * [tFileOutputXML_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tNormalize_1 finally ] start
				 */

				currentComponent = "tNormalize_1";

				/**
				 * [tNormalize_1 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGOUT";

				/**
				 * [tAggregateRow_2_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_2_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_2";

				currentComponent = "tAggregateRow_2_AGGIN";

				/**
				 * [tAggregateRow_2_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Extract_From_WebService Extract_From_WebServiceClass = new Extract_From_WebService();

		int exitCode = Extract_From_WebServiceClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Extract_From_WebService.class.getClassLoader().getResourceAsStream(
					"testtalend/extract_from_webservice_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Extract_From_WebService.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputJSON_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputJSON_1) {
			globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", -1);

			e_tFileInputJSON_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : Extract_From_WebService");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 215736 characters generated by Talend Open Studio for Data Integration on the
 * February 8, 2022 11:15:04 PM WAT
 ************************************************************************************************/